{"name":"Pipeline","tagline":"Designed to aid in targeted brute force password cracking attacks.","body":"# Pipeline\r\nDesigned to aid in targeted brute force password cracking attacks.    \r\n\r\nPipeline is built on top of CForce and it's more or less a \"simpler\" version of Matt Weir's middlechild since you can use it to append all possible combinations of chars.    \r\nPlease don't get me wrong... Middlechild is a great tools, but I think it misses some featurs so I created my own tool!    \r\n\r\nIf you like Pipeline please check out Matt Weir's work over at https://sites.google.com/site/reusablesec/Home/password-cracking-tools/middle-child !    \r\n\r\n#### Compile Pipeline\r\n<code>g++ main.cpp -o pipeline -std=c++11 -pthread</code>    \r\n\r\n#### Usage\r\n\r\n###### Options\r\n\r\n    -t <value           Number of threads to use     \r\n    -b <value>          Number of values stored in each thread (Buffer)     \r\n    -w <value>          Uses the specified dictionarys (up to 10)     \r\n    -append             Appends the values to the end of the input word     \r\n    -prepend            Inserts the values to the front of the input word     \r\n    -charSet <value>    Uses a custom charset     \r\n    -max <value>        Specifies how long the inserted string should be (max)\r\n    -min <value>        Specifies how long the inserted string should be at least (min)\r\n    -capFirst           Capitalizes the input word     \r\n    -capAll             Capitalizes the entire word     \r\n    -capLast            Capitalizes the last letter of the input word      \r\n    -capAllButFirst     Capitalizes all the letters but the first one     \r\n    -capAllButLast      Capitalizes all the letters but the last one      \r\n    -capCeption         All cap options one after another      \r\n\r\n###### Examples:\r\n<code>\r\n    ./pipeline -w rockyou.txt -w dictionary.txt -capFirst -append -max 3 | ./john -stdin -format=NT hashlist.txt\r\n</code>    \r\n    Takes two input dictionarys, capitalizes the first letter, appends 0-3 chars and pipes the output to John    \r\n\r\n\r\n###### How it works\r\n\r\n   \r\nWords in your dic.:    \r\n\r\npassword    \r\ncomputer    \r\n\r\nIf you run:    \r\n<code>./pipeline -append -max 3 -capfirst -capnone</code>        \r\nPipeline will print:    \r\n\r\npassword    \r\nPassword    \r\ncomputer    \r\nComputer    \r\npassword0    \r\nPassword0    \r\ncomputer0    \r\nComputer0    \r\npassword1    \r\nPassword1    \r\ncomputer1    \r\nComputer1    \r\n\r\nand so on...    \r\n\r\n###### Custom Charset\r\n\r\nIf you want to use a specific charset to append/prepend use -charset    \r\n\r\ne.g.    \r\n<code>./pipeline -append -max 3 -capfirst -capnone -charset 2\\\"\\\\!</code>    \r\n\r\noutput:    \r\n\r\npassword    \r\nPassword    \r\ncomputer    \r\nComputer    \r\npassword2    \r\nPassword2    \r\ncomputer2    \r\nComputer2    \r\npassword\"    \r\nPassword\"    \r\ncomputer\"    \r\nComputer\"    \r\n\r\nand so on...    \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}